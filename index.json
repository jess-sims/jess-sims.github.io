[{"categories":null,"contents":" Hello World\rA sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables\rNormal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants\rconst Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jess-sims.github.io/notes/go/basic/introduction/","summary":" Hello World\rA sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables\rNormal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants\rconst Phi = 1.618 ","tags":null,"title":"Go পরিচিতি"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jess-sims.github.io/notes/go/basic/_index.bn/","summary":"","tags":null,"title":"Go বেসিক"},{"categories":null,"contents":" Strings\rstr := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers\rTypical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays\r// var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers\rfunc main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion\ri := 2 f := float64(i) u := uint(i) Slice\rslice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jess-sims.github.io/notes/go/basic/types/","summary":"Strings\rstr := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers\rTypical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays\r// var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers\rfunc main () { b := *getPointer() fmt.","tags":null,"title":"বেসিক টাইপ সমূহ"},{"categories":null,"contents":" Condition\rif day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch\rswitch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop\rfor count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jess-sims.github.io/notes/go/basic/flow-control/","summary":"Condition\rif day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch\rswitch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop\rfor count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition\rif day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jess-sims.github.io/notes/go/advanced/files/","summary":" Condition\rif day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"File Manipulation"},{"categories":null,"contents":" Variable\rNAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition\rif [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jess-sims.github.io/notes/bash/basic/","summary":" Variable\rNAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition\rif [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":null,"contents":"Hugo is a fast, open-source static website generator with many contributors and themes available to suit various needs. It\u0026rsquo;s a fantastic resource for blogs, portfolios and documentation sites and a great tool to keep web hosting costs low as Hugo sites may be hosted on github pages, netlifier and other similar services. As there are various themes available it is also relatively simple to configure a website with minimal coding and command line experience.\nGetting Started There are two Hugo editions to choose from, standard and extended, with extended being the recommended edition.\nIt is also recommends to install Git to avail of the following features:\nBuild Hugo from source Use the Hugo Modules feature Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as CloudCannon, Cloudflare Pages, GitHub Pages, GitLab Pages, and Netlify Please see (link to page name) on installing Git on Windows for further details on installing Git on Windows.\nInstall Hugo on Windows To install Hugo on Windows a package manager is recommended. Chocolatey is a free and open source package manager for Windows which will install the extended edition of Hugo.\nVia the command line run the following: choco install hugo-extended To confirm the installation was successful: hugo version Output should be similar to: \u0026gt; hugo version\rHugo Static Site Generator v0.78.1/extended windows/amd64 BuildDate: unknown Create a New Hugo Site To begin creating your first Hugo site, ensure Git and Git Bash are installed on your Windows Operating System. Git and Git Bash may be installed by visiting https://git-scm.com/download/win and downloading the installer for your current Windows OS. Once the file has been downloaded, launch the installer and follow the onscreen instructions. After the installation has completed, launch Git Bash and navigate to the Desktop or another location where you would like to store your new website:\ncd ~/Desktop/ Now you will execute the command to create a new Hugo site. Please note the -f yml option in the command below is used to create the configuration file in YAML format rather than the standard TOML format. If you woud prefer your configuration file to use TOML formatting, simlpy run the below command without the -f yml option:\n\u0026gt;hugo new site newHugosite -f yml\rCongratulations! Your new Hugo site is created in %user%\\newHugosite.\rJust a few more steps and you\u0026#39;re ready to go:\r1. Download a theme into the same-named folder.\rChoose a theme from https://themes.gohugo.io/ or\rcreate your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command.\r2. Perhaps you want to add some content. You can add single files\rwith \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;.\r3. Start the built-in live server via \u0026#34;hugo server\u0026#34;.\rVisit https://gohugo.io/ for quickstart guide and full documentation. Via file explorer or the command line you will now observe the Hugo website folder structure and base files to be available in your newHugosite folder:\nls\rarchetypes config.yml content data layouts public static themes Use a Hugo Theme Currently the Hugo project folder contains only the file structure and has no HTML or CSS files to create the UI of your website. Many open source themes are available to use for your website which may be used to avoid creating your website from scratch. You may view a full list of available Hugo themes here: https://themes.gohugo.io/\nEach theme should contain it\u0026rsquo;s own documentation and instructions on how to implement the theme available on the theme\u0026rsquo;s preview page or an alternate source cited on the preview page. Often there will also be a running example site for preview.\nPlease note you\u0026rsquo;ll require a github account to clone the theme repository into your website. To create a GitHub account, visit the following link: https://github.com/\nOnce you have decided on a theme, navigate into the themes folder and clone the theme repository. For this example, I will be using the Hugo Profile theme: https://themes.gohugo.io/themes/hugo-profile/\nVia the Hugo Profile theme preview page you will note we have been instructed to navigate into our website \u0026ldquo;themes\u0026rdquo; directory and clone the theme repository into this location:\ncd themes\rgit clone https://github.com/gurusabarish/hugo-profile.git\rCloning into \u0026#39;hugo-profile\u0026#39;...\rremote: Enumerating objects: 5348, done.\rremote: Counting objects: 100% (442/442), done.\rremote: Compressing objects: 100% (241/241), done.\rremote: Total 5348 (delta 260), reused 311 (delta 192), pack-reused 4906\rReceiving objects: 100% (5348/5348), 25.24 MiB | 3.67 MiB/s, done.\rResolving deltas: 100% (2115/2115), done.\rUpdating files: 100% (1687/1687), done. Once the Theme has been cloned you will require to update the config.yml in the main directory of your Hugo site. For the Hugo Profile theme you will require to copy the contents from the theme YAML file into your config.yml as per the documentation. Once completed, your local config.yml should appear exactly as the theme config.yaml.\nViewing and Customizing Your Website Now that your website has a theme you may want to confirm that everything is configured as expected. To view a local live preview of your website, navigate to your website project directory and run the below command:\nhugo server Once completed, copy and paste the provided url output http://localhost:1313 into your browser of choice to view your current website. Hugo server will continue to run and provide live updates until it has been exited with ctrl+c in the terminal. As such, any changes made to the files will be reflected on screen until the task has been terminated.\nAs every theme requires different types of customization, viewing the theme documentation for full steps is required: https://themes.gohugo.io/themes/hugo-profile/\nConclusion Congratulations! You have created your first hugo website using an open source theme. You may now begin to personalize your website and prepare it for a hosting service. A future article will provide further steps on launching and hosting your website.\n","date":"July 8, 2023","hero":"/posts/hugo/hero.svg","permalink":"https://jess-sims.github.io/posts/hugo/","summary":"Hugo is a fast, open-source static website generator with many contributors and themes available to suit various needs. It\u0026rsquo;s a fantastic resource for blogs, portfolios and documentation sites and a great tool to keep web hosting costs low as Hugo sites may be hosted on github pages, netlifier and other similar services. As there are various themes available it is also relatively simple to configure a website with minimal coding and command line experience.","tags":null,"title":"How to create a Hugo Website"},{"categories":null,"contents":"Git is an extremely useful distributed version control system which allows the user to track changes to their files. Git is frequently used among developers, technical writers and other collaborative professions to manage their projects and releases.\nGitHub is a hosting service which works hand in hand with Git so that collaborators may share their projects by hosting the main and current copy of the project on a GitHub repository. From GitHub, users may pull a copy of the project to their local machine, open problem reports and create branches and merge requests which may then be reviewed by the project owner(s). Git and GitHub are the cornerstone of open source computing projects allowing developers from all over the world to collaborate on projects together.\nWhile you do not require a GitHub account to use Git, without pushing your project to GitHub your Git progress will remain on your local machine and collaboration with others would prove more difficult.\nInstalling Git on Windows On Windows, Git may be downloaded via \u0026ldquo;Git for Windows\u0026rdquo; at https://git-scm.com/download/win. From the link, download the installer for your current Windows version. Once the download has completed the file will require to be opened to begin the installation process. Follow the on screen instructions to complete the installation. Please note \u0026ldquo;Git for Windows\u0026rdquo; includes the Git Bash program.\nCreating your GitHub Account To create your GitHub account navigate to https://github.com/ and click \u0026ldquo;Sign Up\u0026rdquo; in the top right hand corner. Once you have entered your email address and password you will require to confirm your email account.\nGit Initial Configurations Once Git has been installed there are a couple of administrative tasks that are required to be completed. The \u0026ldquo;Git for Windows\u0026rdquo; install will have included installation of the \u0026ldquo;Git Bash\u0026rdquo; program on your computer. Launch Git Bash to complete the initial configuration tasks below. Please note these tasks only require to be completed once per git installation.\nMainly, you\u0026rsquo;ll require to confirm your identity via user name and email address. The information provided is logged when you make a Git commit and therefore observable in the Git log to other users.\nAs it is not necessarily advisable to have your personal email address available on the internet, it would be recommended to ensure your GitHub security options are agreeable and use the recommended GitHub email provided. You may view your GitHub email address settings via navigating to your profile on the top right hand corner \u0026gt; settings \u0026gt; emails \u0026gt; and ensure that the below email settings are enabled.\nTo configure your git user name and email address, run the commands below with the appropriate values:\n$ git config --global user.name \u0026#34;Jane Doe\u0026#34; $ git config --global user.email janedoe@users.noreply.github.com Creating your First Git Project Via the command line on Git Bash, navigate to your Desktop and create a new folder named \u0026ldquo;TestProject\u0026rdquo;. Once the new folder has been created, change into the \u0026ldquo;TestProject\u0026rdquo; directory: $ cd ~/Desktop $ mkdir TestProject $ cd TestProject To initialize Git on the project, type the following command in the new directory we have just created: $ git init To begin, add a couple of new files to the directory and confirm that they have been created successfully: $ touch index.html $ touch style.css $ ls To add all of these new files and changes into your staging area in Git for preparation to commit: $ git add . To confirm which files are in the staging area or have been modified: $ git status It is now time to make your first git commit. A commit moves the files and changes from the staging area into a new \u0026ldquo;save\u0026rdquo; of your files with Git. The -m flag below indicates the message to be included with the commit and it is good practice to leave relevant notes with your commits with a view that yourself and other collaborators will have a clear view of changes made over the course of a project. For example, \u0026ldquo;Created index.html file and style.css file\u0026rdquo;: $ git commit -m \u0026#34;Created index.html file and style.css file\u0026#34; You can review the Git log at any time which displays a timeline of all commits starting with the most recent: $ git log Creating your First GitHub Repo To create your first GitHub repo, navigate to your profile on the top right hand corner. From your profile, on the top left menu you\u0026rsquo;ll observe a tab called \u0026ldquo;Repositories\u0026rdquo;. Click this and select \u0026ldquo;New\u0026rdquo; on the top right hand of the page. You will require to fill out the form as explained below:\nChoose a unique repository name If you\u0026rsquo;re so inclined, GitHub provides suggestions on available unique names which you may use for your repository (Optional) Provide a repository description Choose if the repository should be public or private As we will be adding the files from a local folder do not create a README file at this time To learn more about ignoring files visit https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files To learn more about chosing a license visit https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files Create your first repository! Uploading your Files to GitHub As you have already made your first commit locally the following steps will require to be carried out via command line to push the local files to your newly created GitHub repo:\ngit branch -M main git remote add origin https://github.com/jess-sims/\u0026lt;reponame\u0026gt;.git git push -u origin main As this is the first time connecting to your repository, you will now be prompted to authenticate your GitHub account via the command line by providing your username and password or via an alternate authentication method.\nOnce this completes you should now observe your files in your GitHub repository after refreshing the page!\nConclusion You should now understand the basics of creating a Git project and uploading this to a repository on your GitHub account. There are further git commands for creating new branches, merging branches, switching branches, pulling a repository from GitHub to your local machine and more, however, another article will be required to discuss these further.\n","date":"July 3, 2023","hero":"/posts/git/hero.svg","permalink":"https://jess-sims.github.io/posts/git/","summary":"Git is an extremely useful distributed version control system which allows the user to track changes to their files. Git is frequently used among developers, technical writers and other collaborative professions to manage their projects and releases.\nGitHub is a hosting service which works hand in hand with Git so that collaborators may share their projects by hosting the main and current copy of the project on a GitHub repository. From GitHub, users may pull a copy of the project to their local machine, open problem reports and create branches and merge requests which may then be reviewed by the project owner(s).","tags":null,"title":"Git and GitHub"},{"categories":null,"contents":"Markdown is a lightweight markup language used to make webpages easier on on the eye when displayed and simplier to read in plain text format. Markdown is widely popular due to its ease of use and its acceptance by many applications such as documentation systems, note-taking applications and messaging systems.\nThe below examples showcase some of the basic Markdown syntax elements, however, there are more features and Markdown flavours available depending on the Markdown implementation or specific application you\u0026rsquo;re using. For further information on markdown and a more robust syntax list please review https://www.markdownguide.org/\nMarkdown Syntax Rendering Headings Headings and subheadings may be used to provide an outline of how the page is structured by breaking up web pages into sections and introducing the reader to a new topic. H1 is the largest heading available while H6 is the smallest:\n# H1\r## H2\r### H3\r#### H4\r##### H5\r###### H6 All headings in this article are between H1 and H4 in size and the topics these are used for may be observed in the Table of Contents on the right hand side of this page.\nEmphasis Emphasis is an important asset to assist readers in identifing important points in text. Basic Markdown allows for the use of italic, bold, italic and bold, or strikethrough.\nItalic Italics are generally used for titles and names in writing such as books, movies and vessels or for a new word or concept. For use of italics in markdown see below:\n*Italic text* Bold To strongly emphasize keywords the use of bold can be very effective:\n**Bold text** To use both italic and bold, begin and end the word(s) with three asterisks:\n***Italic and bold*** Strikethrough The use of strikethrough can be a fun way to emphasize a change of idea or opinion. Such as; You don\u0026rsquo;t need to backup your storage. Everyone needs to backup their storage:\n~~You don\u0026#39;t need to backup your storage.~~ Everyone needs to backup their storage. Paragraph Markdown renders paragraphs and line breaks as you would normally write them, there is no need for any special characters. However, traditional html paragraph code and line breaks may be used if required although caution should be taken when used as not all applications will render this code in the the same manner.\nBlockquotes A blockquote represents content that is quoted from another source. Markdown has systax for blockquotes with and without citation. When using citation for your sources these will be contained within the footer.\nBlockquote without Citation A blockquote without citation may be achieved by beginning the line with the greater than symbol:\nIt always seems impossible until it\u0026rsquo;s done. Note: Markdown syntax may be used within a blockquote for example to achieve italic or bold emphasis.\n\u0026gt; It always seems impossible until it\u0026#39;s done.\r\u0026gt; **Note:** *Markdown syntax* may be used within a blockquote for example to achieve *italic* or **bold** emphasis. Blockquote with Citation Creating a blockquote with citation is similar to the above with some added code:\nIt always seems impossible until it\u0026rsquo;s done.\n— Nelson Mandela1\n\u0026gt; It always seems impossible until it\u0026#39;s done.\u0026lt;/p\u0026gt;\r\u0026gt; — \u0026lt;cite\u0026gt;Nelson Mandela[^1]\u0026lt;/cite\u0026gt; Footnotes A footnote contains additional information printed at the bottom of the page for reference.\nExample: Here\u0026rsquo;s a small footnote,1 and here\u0026rsquo;s a lengthier one containing a full paragraph with some code.2\nHere\u0026#39;s a small footnote,[^1] and here\u0026#39;s a lengthier one containing a full paragraph with some code.[^bignote]\r[^1]: Footnote one [^bignote]: A footnote with paragraphs and code.\rIndent your paragraphs to have them included in the footnote.\r`{ add some code }`\rSee bottom of the page for the full output of footnotes Tables Markdown does not support tables as part of its core capabilities, however, many applications support a basic table such as:\nName Age Rosa 22 Ben 34 Creating a table can be as simple as the below formating:\n| Name | Age |\r| ----- | --- |\r| Rosa | 22 |\r| Ben | 34 | List Types Lists provide the reader with a precise and ordered overview and thankfully Markdown supports multiple ways to create lists.\nOrdered List Example ordered list:\nOpen the command line Navigate to the root directory Make a new directory 1. Open the command line\r2. Navigate to the root directory 3. Make a new directory Unordered List Example undordered list:\nFlour Milk Bread Olive Oil * Flour\r* Milk * Bread * Olive Oil Nested List Example nested list:\nPantry Pasta Tomato Sauce Cereal Fish Cod Hake * Pantry\r* Pasta\r* Tomato Sauce\r* Cereal\r* Fish\r* Cod\r* Hake Task Lists Example task list:\nSunblock Towel Beachwear - [x] Sunblock\r- [ ] Towel\r- [ ] Beachwear Image inside of a list When providing instructions it may be helpful to place an image inside of a list, for example:\nTo open the command prompt on windows press \u0026ldquo;Windows + R\u0026rdquo;.\nIn the run program window type \u0026ldquo;cmd\u0026rdquo; and press \u0026ldquo;Enter\u0026rdquo; to launch the command prompt\nEnjoy exploring the command line!\nSyntax:\n1. To open the command prompt on windows press \u0026#34;Windows + R\u0026#34;. 2. In the run program window type \u0026#34;cmd\u0026#34; and press \u0026#34;Enter\u0026#34; to launch the command prompt\r![Windows Command Line](cmd.png)\r3. Enjoy exploring the command line! Code Words To denote a word or a phrase as code, enclose the word(s) in backticks. For example: At the command prompt, enter vi newtextfile.txt.\nAt the command prompt, enter `vi newtextfile.txt`. Code Blocks Code blocks can be extremely useful when writing instructions, especially in relation to computing and software. Thankfully, there are multiple ways to use code blocks with Markdown as seen below.\nCode Block using Backticks The easiest way to announce a code block is to use three backticks (`) at the beginning of the code and three backticks at the end of the code:\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Paragraph\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Code Block using Four Indented Spaces You may also use four indented spaces to indicate a block of code:\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Paragraph\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Code Block Inside of a List When conveying complex instructions it may be beneficial to have a code block in the middle of a list. For example:\nOpen the command line\nRun the following command on your Linux Ubuntu machine to install Go\nsudo apt-get install golang Enter your administrator password\nSyntax:\n1. Open the command line\r2. Run the following command on your Linux Ubuntu machine to install Go\rsudo apt-get install golang 3. Enter your administrator password Images Using images can draw the reader into your article by providing visual appeal, illistrating examples and conveying important messages.\nSyntax:\n![Text](commandline.jpg) Links Providing links is an important way to direct the reader to sources or further reading materials. With Markdown you can turn text into a link from text via:\n[link from text](https://www.markdownguide.org) URLs and Email Addresses To use a URL or an email address as a link you may enclose either in angle brackets. Example: Email me at email@example.com or visit https://www.markdownguide.org for further information:\n\u0026lt;https://www.markdownguide.org\u0026gt;\r\u0026lt;email@example.com\u0026gt; Horizontal rule The horizontal rule creates a line across the page which can be helpful to break up content. For example, the horizontal rule is in use and may be observed at both the start and end of this section. The horizontal rule may be acieved by using three or more asterisks, dashes or underscores on their own. Please note mixing and matching these symbols will not achieve the horizontal rule.\n***\r---\r___ Footnote Example Footnote one\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nA footnote with paragraphs and code.\nIndent your paragraphs to have them included in the footnote.\n{ add some code }\nSee bottom of the page for the full output of footnotes\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"May 5, 2023","hero":"/posts/markdown/hero.svg","permalink":"https://jess-sims.github.io/posts/markdown/","summary":"Markdown is a lightweight markup language used to make webpages easier on on the eye when displayed and simplier to read in plain text format. Markdown is widely popular due to its ease of use and its acceptance by many applications such as documentation systems, note-taking applications and messaging systems.\nThe below examples showcase some of the basic Markdown syntax elements, however, there are more features and Markdown flavours available depending on the Markdown implementation or specific application you\u0026rsquo;re using.","tags":null,"title":"Using Markdown"}]